# Generated by Django 5.2.4 on 2025-09-16 06:14

import labels.models.label_field
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('labels', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='examplelabel1',
            options={'verbose_name': 'label', 'verbose_name_plural': 'label'},
        ),
        migrations.AlterModelOptions(
            name='examplelabel2',
            options={'verbose_name': 'label', 'verbose_name_plural': 'label'},
        ),
        migrations.AlterField(
            model_name='examplelabel1',
            name='label_display_format',
            field=labels.models.label_field.LabelDisplayFormatField(default='<label name>: <separator><label value>', help_text='When displayed on a webpage, "<label name>" and "<label value>" will be replaced with actual values, using "<separator>" to achieve grouping. The spacing between groups guided by "<separator>" is determined by the system, and "<separator>" can appear a maximum of two times. The default is: <label name>: <label value>.', verbose_name='label display format'),
        ),
        migrations.AlterField(
            model_name='examplelabel1',
            name='label_name',
            field=labels.models.label_field.LabelNameField(default='ExampleLabel1', verbose_name='label name'),
        ),
        migrations.AlterField(
            model_name='examplelabel1',
            name='label_type',
            field=labels.models.label_field.LabelChoiceField(choices=[('timer', 'timer'), ('counter', 'counter'), ('read_only', 'read_only')], default='read_only', help_text='When displayed on a webpage, if it is a timer or stepper, and the container type of the label is "interactive," the API for the label trigger will be called.', verbose_name='label type'),
        ),
        migrations.AlterField(
            model_name='examplelabel1',
            name='label_value',
            field=labels.models.label_field.LabelIntegerField(verbose_name='label value'),
        ),
        migrations.AlterField(
            model_name='examplelabel1',
            name='used_in_container',
            field=labels.models.label_field.LabelsContainerField(default='None', help_text='This value is automatically managed by the system to prevent the label from being reused across models. Please do not modify this value unless necessary.', verbose_name='belongs to'),
        ),
        migrations.AlterField(
            model_name='examplelabel2',
            name='label_display_format',
            field=labels.models.label_field.LabelDisplayFormatField(default='<label name>: <separator><label value>', help_text='When displayed on a webpage, "<label name>" and "<label value>" will be replaced with actual values, using "<separator>" to achieve grouping. The spacing between groups guided by "<separator>" is determined by the system, and "<separator>" can appear a maximum of two times. The default is: <label name>: <label value>.', verbose_name='label display format'),
        ),
        migrations.AlterField(
            model_name='examplelabel2',
            name='label_name',
            field=labels.models.label_field.LabelNameField(default='ExampleLabel2', verbose_name='label name'),
        ),
        migrations.AlterField(
            model_name='examplelabel2',
            name='label_type',
            field=labels.models.label_field.LabelChoiceField(choices=[('timer', 'timer'), ('counter', 'counter'), ('read_only', 'read_only')], default='read_only', help_text='When displayed on a webpage, if it is a timer or stepper, and the container type of the label is "interactive," the API for the label trigger will be called.', verbose_name='label type'),
        ),
        migrations.AlterField(
            model_name='examplelabel2',
            name='label_value',
            field=labels.models.label_field.LabelIntegerField(verbose_name='label value'),
        ),
        migrations.AlterField(
            model_name='examplelabel2',
            name='used_in_container',
            field=labels.models.label_field.LabelsContainerField(default='None', help_text='This value is automatically managed by the system to prevent the label from being reused across models. Please do not modify this value unless necessary.', verbose_name='belongs to'),
        ),
    ]
